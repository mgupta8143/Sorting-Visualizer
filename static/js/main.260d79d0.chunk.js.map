{"version":3,"sources":["sortingAlgorithms/insertionSort.js","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/countingSort.js","sortingAlgorithms/radixSort.js","sortingAlgorithms/selectionSort.js","sortingAlgorithms/heapSort.js","sortingAlgorithms/mergeSort.js","sortingAlgorithms/cocktailSort.js","sortingAlgorithms/pancakeSort.js","SortingVisualizer.js","index.js"],"names":["insertionSort","a","arr","this","state","array","shouldStop","i","length","key","j","stopSort","update","bubbleSort","resetSelectedValues","swap","status","quickWrapper","quickSort","setState","left","right","partition","index","pivot","Math","floor","countingSort","min","minQuantity","max","maxQuantity","count","getDigit","num","idx","digit","largestNum","largest","forEach","val","getNumDigits","radixSort","maxLength","buckets","Array","from","stopState","undefined","push","flat","selectionSort","checkSorted","minIdx","getMinIndex","beginIdx","heapify","n","maxHeapify","heapSort","mergeWrapper","mergeSort","begin","end","middle","merge","temp","slice","findMin","k","cocktailSort","start","pancakeSort","maxIdx","findBiggestElement","flip","SortingVisualizer","props","bind","resetArray","getInitialSpeed","handleSpeedChange","arraySize","sortingSpeed","resetSpeed","changer","selectedValues","swappedValues","colorBegin","colorMultiplier","bool","forceARender","idx1","idx2","tempArray","randomizedValue","random","Promise","r","setTimeout","shuffleFlip","event","target","value","selectedIndices","speedMultiplier","algorithms","algo","name","class","id","type","onChange","map","onClick","className","quantity","backgroundColor","toString","style","height","marginTop","width","onMouseEnter","e","background","onMouseLeave","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.260d79d0.chunk.js","sourcesContent":["export async function insertionSort() {\n    let arr = this.state.array;\n    this.shouldStop = false;\n    for (let i = 1; i < arr.length; ++i) {\n        let key = arr[i];\n        let j = i - 1;\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j -= 1;\n            if(this.shouldStop === true)\n                return this.stopSort();\n            await this.update(arr, [key,j], 10);\n        }\n        arr[j + 1] = key;\n    }\n    return arr;\n}","export async function bubbleSort() {\n    let arr = this.state.array;\n    this.shouldStop = false;\n    this.resetSelectedValues();\n    for(let i = 0; i < arr.length; ++i) {\n        for(let j = 0; j < arr.length - i; ++j) {\n            if(arr[j+1] < arr[j])\n            {\n                if(this.shouldStop === true)\n                    return this.stopSort();\n                this.swap(arr, j, j+1)\n                await this.update(arr, [j],1);\n            }\n        }\n        if(i >= arr.length - 3) {\n            this.status = \"\";\n        }\n    }\n    return arr;\n}","export async function quickWrapper() {\n    this.shouldStop = false;\n    let arr = this.state.array;\n    this.resetSelectedValues();\n    this.setState({array: await this.quickSort(arr, 0, arr.length -1)});\n}\n\nexport async function quickSort(arr, left, right) {\n    if (arr.length > 1) {\n        let index = await this.partition(arr, left, right);\n        if(this.shouldStop === true)\n            return this.stopSort(arr, true);\n        if (this.shouldStop === false) {\n            if (left < index - 1) {\n                this.quickSort(arr, left, index - 1);\n            }\n            if (index < right) {\n                this.quickSort(arr, index, right);\n            }\n        }\n        else if (left === 0 && right === arr.length - 1) {\n            this.shouldStop = false;\n        }\n    }\n    return arr\n}   \n\nexport async function partition(arr, left, right) {\n    var pivot = arr[Math.floor((right + left) / 2)], i = left, j = right;\n    while (i <= j) {\n        if(this.shouldStop === true) {\n            break;\n        }\n        while (arr[i] < pivot) {\n            ++i;\n        }\n        while (arr[j] > pivot) {\n            --j;\n        }\n        if (i <= j) {\n            this.swap(arr, i, j);\n            this.setState({array:arr});\n            await this.update(arr, [i,j], 50);\n            ++i;\n            --j;\n        }\n    }\n    return i;\n}","export async function countingSort() {\n    this.resetSelectedValues();\n    this.shouldStop = false;\n    let arr = this.state.array;\n    let min = this.state.minQuantity;\n    let max = this.state.maxQuantity;\n    let count = [];\n    let j = 0;\n    for(let i = min; i <= max; ++i) {\n        count[i] = 0;\n    }\n    for(let i = 0; i <= arr.length; ++i) {\n        count[arr[i]] += 1;\n    }\n    for(let i = min; i <= max; ++i) {\n        while(count[i] > 0) {\n            if(this.shouldStop === true) {\n                return this.stopSort(arr)\n            }\n            arr[j] = i;\n            await this.update(arr, [j], 50);\n            this.setState({array:arr});\n            ++j;\n            --count[i];\n        }\n    }\n    return arr\n}","function getDigit(num, idx) {\n    let digit = num % 10;\n    while(idx > 0) {\n        num = (num - (num % 10))/10;\n        idx -= 1;\n        digit = num % 10;\n    }\n    return digit;\n}\n\nfunction getNumDigits(num) {\n    if(num === 0)\n        return 1;\n    let count = 0;\n    while(num > 0) {\n        num = (num - (num % 10))/10;\n        count += 1;\n    }\n    return count;\n}\n\nfunction largestNum(arr) {\n    let largest = 0;\n    arr.forEach(val => {\n        if(val > largest) {\n            largest = val;\n        }\n    });\n    return getNumDigits(largest);\n}\n\nexport async function radixSort() {\n    this.shouldStop = false;\n    let arr  = this.state.array;\n    let maxLength = largestNum(arr);\n    for (let i = 0; i < maxLength; ++i) {\n        let buckets = Array.from({ length: 10 }, () => []);\n        for (let j = 0; j < arr.length; ++j) {\n            if(this.shouldStop === true) {\n                return this.stopState(arr);\n            }\n            let num = getDigit(arr[j], i);\n            if (num !== undefined)\n              buckets[num].push(arr[j]);\n        };\n        arr = buckets.flat();\n        if(this.shouldStop === true) {\n            return this.stopState(arr);\n        }\n        await this.update(arr, [], 30000)\n        this.setState({array:arr});\n    };\n    return arr;\n}","export async function selectionSort() {\n    this.shouldStop = false;\n    let arr = this.state.array;\n    if(this.checkSorted(arr))\n        return;\n    this.resetSelectedValues();\n    for(let i = 0; i < arr.length - 1; ++i) {\n        let minIdx = getMinIndex(arr, i);\n        this.swap(arr, minIdx, i);\n        if(this.shouldStop === true) {\n            return this.stopSort(arr);\n        }\n        await this.update(arr, [minIdx, i], 100);\n        this.setState({array:arr});\n    }\n    return arr;\n}\n\nfunction getMinIndex(arr, beginIdx = 0) {\n    let idx = beginIdx\n    for(let i = beginIdx + 1; i < arr.length; ++i) \n        if(arr[i] < arr[idx]) \n            idx = i;\n    return idx;\n}","export async function heapify(arr, n, i) {\n    let max = i;\n    let left = 2*i + 1;\n    let right = 2*i + 2;\n\n    if(left < n && arr[left] > arr[max]) {\n        max = left;\n    }\n    if(right < n && arr[right] > arr[max]) {\n        max = right;\n    }\n\n    if(max !== i) {\n        this.swap(arr, max, i);\n        await this.heapify(arr, n, max);\n    }\n\n    await this.update(arr, [max, i], 1000);\n}\n\nexport async function maxHeapify(arr) {\n    for(let i = Math.floor(arr.length/2); i >= 0; --i) {\n        await this.heapify(arr, arr.length, i);\n        if(this.shouldStop) {\n            this.resetSelectedValues()\n            this.status = \"\";\n            return arr;\n        }\n    }\n    return arr;\n}\n\nexport async function heapSort() {\n    let arr = this.state.array;\n    this.shouldStop = false;\n    arr = await this.maxHeapify(arr);\n    for(let n = arr.length-1; n >= 0; --n) {\n        if(this.shouldStop) {\n            this.shouldStop = false;\n            this.resetSelectedValues()\n            this.status = \"\";\n            return arr;\n        }\n        this.swap(arr, n, 0);\n        await this.heapify(arr, n, 0);\n    }\n    return arr;\n}","export async function mergeWrapper() {\n   this.shouldStop = false;\n   await this.mergeSort(this.state.array, 0, this.state.array.length);\n}\n\n\nexport async function mergeSort(arr, begin, end) {\n   if(end-begin <= 1) {\n      return [begin, end];\n   }\n   let middle = Math.floor((begin + end)/2)\n   if(this.shouldStop) {\n      this.stopSort(arr, true)\n      return [begin, end];\n   }\n   let left = await this.mergeSort(arr, begin, middle);\n   let right = await this.mergeSort(arr, middle, end);\n   let temp = await this.merge(arr, left[0], middle, right[1]);\n   while(this.checkSorted(arr.slice(left[0], right[1])) === false) {\n      if(this.shouldStop) {\n         this.stopSort(arr, true)\n         return [begin, end];\n      }\n      temp = await this.merge(arr, left[0], middle, right[1]);\n   }\n   return temp;\n}\n\n/* IN-PLACE MERGE */\nexport async function merge(arr, begin, middle, end) {\n   let i = begin;\n   let j = middle;\n   while(i < end && j < end) {\n      if(this.shouldStop) {\n         this.stopSort(arr, true)\n         return [begin, end];\n      }\n      await this.update(arr,[i,j], 10);\n      if(arr[i] <= arr[j]) {\n         ++i;\n      }\n      else if(arr[i] > arr[j]) {\n         this.swap(arr, i, j);\n         j = findMin(arr,j,j+1);\n         ++i;\n      }\n      if(i === j) {\n         ++j;\n      }\n   }\n   return [begin, end]; \n}\n\n\nfunction findMin(arr, j, k) {\n  if(arr[k] < arr[j])\n    return k;\n  else\n    return j;\n}\n","/*FIX STOP*/\r\n\r\nexport async function cocktailSort() {\r\n    let arr = this.state.array;\r\n    let start = 0;\r\n    let end = arr.length;\r\n    this.shouldStop = false;\r\n    for(let n = 0; n < arr.length; n++) {\r\n        if(n % 2 === 0)  {\r\n            let idx = start;\r\n            while(idx !== end - 1) {\r\n                if(arr[idx + 1] < arr[idx]) {\r\n                    this.swap(arr, idx, idx + 1);\r\n                    await this.update(arr, [idx, idx+1], 100);\r\n                    if(this.shouldStop)\r\n                        return this.stopSort(arr);\r\n                }\r\n                ++idx;\r\n            }\r\n            --end;\r\n        }\r\n        else {\r\n            let idx = end - 1;\r\n            while(idx !== start) {\r\n                if(arr[idx - 1] > arr[idx]) {\r\n                    this.swap(arr, idx, idx-1);\r\n                    await this.update(arr, [idx, idx-1], 100);\r\n                    if(this.shouldStop)\r\n                        return this.stopSort(arr);\r\n                }\r\n                --idx;\r\n            }\r\n            ++start;\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\n/*\r\nexport async function cocktailSort() {\r\n    let arr = this.state.array;\r\n    let start = 0;\r\n    let end = arr.length;\r\n    for(let n = 0; n < arr.length; n++) {\r\n        if(n % 2 === 0)  {\r\n            end = await this.moveBar(1, start, end)[1];\r\n        }\r\n        else {\r\n            start = await this.moveBar(-1, start, end)[0];\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport async function moveBar(direction, start, end) {\r\n    let arr = this.state.array;\r\n    let idx = 0, stopIdx = 0;\r\n    if(direction === 1) {idx = start; stopIdx = end-1;}\r\n    if(direction === -1) {idx = end-1; stopIdx = start;}\r\n    while(idx != stopIdx) {\r\n        if(giveDirectionConditional(arr, direction, idx)) {\r\n            this.swap(arr, idx, idx + direction);\r\n            await this.update(arr, [idx, idx+direction], 100);\r\n        }\r\n        idx = idx + direction;\r\n    }\r\n    if(direction === 1) --end;\r\n    if(direction === -1) ++start;\r\n    return [start, end];\r\n\r\n}\r\n\r\nfunction giveDirectionConditional(arr, direction, idx) {\r\n    if(direction == 1) return arr[idx+direction] < arr[idx];\r\n    if (direction == -1) return arr[idx+direction] > arr[idx];\r\n}\r\n*/","export async function pancakeSort() {\r\n    this.shouldStop = false;\r\n    let arr = this.state.array;\r\n    let start = 0;\r\n    let end = arr.length - 1;\r\n    while(end >= 0) {\r\n        if(this.shouldStop) {\r\n            return this.stopSort(arr, true);\r\n        }\r\n        let maxIdx = findBiggestElement(arr, start, end);\r\n        arr = await this.flip(arr, maxIdx);\r\n        arr = await this.flip(arr, end);\r\n        --end;\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport async function flip(arr, i) {\r\n    let start = 0;\r\n    if(this.shouldStop) {\r\n        return this.stopSort(arr,true);\r\n    }\r\n    while(start < i) {\r\n        if(this.shouldStop) {\r\n            return this.stopSort(arr, true);\r\n        }\r\n        this.swap(arr, i, start);\r\n        await this.update(arr, [start, i], 100);\r\n        ++start;\r\n        --i;\r\n    }\r\n    return arr\r\n}\r\n\r\nfunction findBiggestElement(arr, start, end) {\r\n    let idx = start;\r\n    for(let i = start; i <= end; i++) {\r\n        if(arr[i] > arr[idx]) {\r\n            idx = i;\r\n        }\r\n    }\r\n    return idx;\r\n\r\n}","import React from 'react';\r\nimport {insertionSort} from './sortingAlgorithms/insertionSort.js';\r\nimport {bubbleSort} from './sortingAlgorithms/bubbleSort.js';\r\nimport {quickSort, quickWrapper, partition} from './sortingAlgorithms/quickSort.js';\r\nimport {countingSort} from './sortingAlgorithms/countingSort.js';\r\nimport {radixSort} from './sortingAlgorithms/radixSort.js';\r\nimport {selectionSort} from './sortingAlgorithms/selectionSort.js';\r\nimport {heapSort, heapify, maxHeapify} from './sortingAlgorithms/heapSort.js';\r\nimport {mergeWrapper, mergeSort, merge} from './sortingAlgorithms/mergeSort.js';\r\nimport {cocktailSort} from \"./sortingAlgorithms/cocktailSort.js\";\r\nimport {pancakeSort, flip} from \"./sortingAlgorithms/pancakeSort.js\";\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        /*Changed Format of Sorting Visualizer */\r\n        super(props);\r\n        this.mergeWrapper = mergeWrapper.bind(this);\r\n        this.mergeSort = mergeSort.bind(this);\r\n        this.merge = merge.bind(this);\r\n        this.insertionSort = insertionSort.bind(this);\r\n        this.bubbleSort = bubbleSort.bind(this);\r\n        this.quickWrapper = quickWrapper.bind(this);\r\n        this.quickSort = quickSort.bind(this);\r\n        this.partition = partition.bind(this);\r\n        this.countingSort = countingSort.bind(this);\r\n        this.radixSort = radixSort.bind(this);\r\n        this.selectionSort = selectionSort.bind(this);\r\n        this.heapSort = heapSort.bind(this);\r\n        this.heapify = heapify.bind(this);\r\n        this.maxHeapify = maxHeapify.bind(this);\r\n        this.cocktailSort = cocktailSort.bind(this);\r\n        this.pancakeSort = pancakeSort.bind(this);\r\n        this.flip = flip.bind(this);\r\n    \r\n        this.resetArray = this.resetArray.bind(this);\r\n        this.stopState = this.stopState.bind(this);\r\n        this.getInitialSpeed = this.getInitialSpeed.bind(this);\r\n        this.handleSpeedChange = this.handleSpeedChange.bind(this);\r\n        this.resetSelectedValues = this.resetSelectedValues.bind(this);\r\n        this.update = this.update.bind(this);\r\n\r\n        this.state = {array: [1,3,2,9,10,12,3,45,3,70], arraySize: 75, minQuantity: 1, maxQuantity: 70, sortingSpeed: 50, resetSpeed: 1, changer: true}\r\n        this.shouldStop = false;\r\n        this.status = \"\";\r\n        this.selectedValues = [];\r\n        this.swappedValues = [];\r\n        this.colorBegin = 100;\r\n        this.colorMultiplier = 2;\r\n        \r\n    }\r\n\r\n    forceARender() {\r\n        this.setState({changer: !this.state.changer});\r\n    }\r\n\r\n    stopSort(arr, bool = false) {\r\n        this.status = \"\";\r\n        this.resetSelectedValues();\r\n        this.shouldStop = bool;\r\n        return arr;\r\n    }\r\n\r\n    resetSelectedValues() {\r\n        this.forceARender();\r\n        this.selectedValues = [];\r\n        for(let i = 0; i < this.arraySize; ++i) {\r\n            this.selectedValues.push(0);\r\n        }\r\n    }\r\n\r\n    checkSorted(arr) {\r\n        for(let i = 0; i < arr.length - 1; ++i) \r\n            if(arr[i+1] < arr[i])\r\n                return false;\r\n        return true;\r\n    }\r\n\r\n\r\n    swap(arr, idx1, idx2) {\r\n        let temp = arr[idx1];\r\n        arr[idx1] = arr[idx2];\r\n        arr[idx2] = temp;\r\n    }\r\n\r\n    \r\n    async resetArray() {\r\n        this.stopState();\r\n        this.status = \"Resetting...\";\r\n        let tempArray = [];\r\n        for(let i = 0; i < this.state.arraySize; ++i) {\r\n            let max = this.state.maxQuantity;\r\n            let min = this.state.minQuantity;\r\n            let randomizedValue = Math.floor(Math.random() * (max + 1 - min) + min);\r\n            tempArray.push(randomizedValue);\r\n            this.setState({array: tempArray});\r\n            await new Promise(r => setTimeout(r, this.state.resetSpeed));\r\n            if(i === this.state.arraySize - 2) {\r\n                this.status = \"\";\r\n            }\r\n            if(i % 12 === 0) {\r\n                this.shuffleFlip(this.state.array);\r\n                this.colorBegin = Math.random() * 360;\r\n                this.colorMultiplier = 1 + Math.random();\r\n            }\r\n        }\r\n    }\r\n\r\n    async shuffleFlip(arr, i) {\r\n        for(let i = 0; i < arr.length; ++i) {\r\n            let max = this.state.maxQuantity;\r\n            let min = this.state.minQuantity;\r\n            let randomizedValue = Math.floor(Math.random() * (max + 1 - min) + min);\r\n            arr[i] = randomizedValue;\r\n        }\r\n    }\r\n\r\n    stopState() {\r\n        this.status = \"\";\r\n        while(this.shouldStop === false) \r\n            this.shouldStop = true;\r\n    }\r\n\r\n    getInitialSpeed() {\r\n        this.setState({sortingSpeed: 50});\r\n    }\r\n\r\n    handleSpeedChange(event) {\r\n        this.setState({sortingSpeed: event.target.value});\r\n    }\r\n\r\n    async update(arr, selectedIndices, speedMultiplier) {\r\n        return new Promise(r => {\r\n            setTimeout(r, speedMultiplier/this.state.sortingSpeed);\r\n            this.status = \"Sorting...\";\r\n            selectedIndices.forEach(index => {\r\n                if(index < arr.length && 0 <= index)\r\n                    this.selectedValues[index] = 1\r\n            });\r\n            if(this.checkSorted(arr)) {\r\n                this.status = \"\";\r\n                this.resetSelectedValues();\r\n            }\r\n            this.setState({array: arr});\r\n            this.resetSelectedValues();\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let array = this.state.array;\r\n        const algorithms =  [\r\n            { algo: this.insertionSort, name: \"Insertion Sort\" },\r\n            { algo: this.bubbleSort, name: \"Bubble Sort\" },\r\n            { algo: this.quickWrapper, name: \"Quick Sort\" },\r\n            { algo: this.countingSort, name: \"Counting Sort\" },\r\n            { algo: this.radixSort, name: \"Radix Sort\" },\r\n            { algo: this.selectionSort, name: \"Selection Sort\" },\r\n            { algo: this.heapSort, name: \"Heap Sort\" },\r\n            { algo: this.mergeWrapper, name: \"Merge Sort\" },\r\n            { algo: this.cocktailSort, name: \"Cocktail Sort\" },\r\n            { algo: this.pancakeSort, name: \"Pancake Sort\" },\r\n          ];\r\n        return (\r\n            <div class = \"row content-wrapper\">\r\n                <div class = \"col-2\" id = \"navbar\">\r\n                    <ul id = \"sortList\">\r\n                        <input type=\"range\" min=\"1\" max={this.state.arraySize/2} value={this.state.sortingSpeed}  onChange = {this.handleSpeedChange} class=\"slider\" id=\"myRange\"></input>\r\n                        {\r\n                            //Special Thanks to gimmeslack12 for suggesting this MASSIVE improvement!!!\r\n                        algorithms.map((a) => (\r\n                            <li key={a.name}>\r\n                            <button class=\"btn btn-outline-info btn-block\" onClick={a.algo}>\r\n                                {a.name}\r\n                            </button>\r\n                            </li>\r\n                        ))}\r\n                        <li>\r\n                            <button class=\"btn btn-outline-info btn-block\" onClick = {this.resetArray}>Reset Array</button>\r\n                        </li>\r\n                        <li>\r\n                            <button class=\"btn btn-outline-danger btn-block\" onClick = {this.stopState} >Stop</button>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div class = \"col-10\" id = \"visualizer\">\r\n                    <h1 id = \"status\">{this.status}</h1>\r\n                    <ul className = \"stack\">\r\n                        {array.map((quantity, idx) => {\r\n                            let highlightBar = (e) => {\r\n                                e.target.style.background = \"hsla(\" + (this.colorBegin -100).toString() + \", 100%, 50%, 1)\";\r\n                            }\r\n                            let unhighlightBar = (e) => {\r\n                                e.target.style.background = \"hsla(\" + (this.colorBegin+quantity*this.colorMultiplier).toString() + \", 100%, 50%, 1)\";\r\n                            }\r\n                            let backgroundColor = \"hsla(\" + (this.colorBegin+quantity*this.colorMultiplier).toString() + \", 100%, 50%, 1)\";\r\n                            if(this.selectedValues[idx] === 1) {\r\n                                backgroundColor = \"hsla(\" + (this.colorBegin -100).toString() + \", 100%, 50%, 1)\"\r\n                            }\r\n                            const style = {\r\n                                height: quantity.toString() + \"vh\",\r\n                                marginTop: (-1 * (quantity - 5)/2).toString() + \"vh\",\r\n                                width: (70/this.state.arraySize).toString() + \"vw\",\r\n                                backgroundColor: backgroundColor\r\n                            };\r\n                            return <div onMouseEnter = {highlightBar} onMouseLeave = {unhighlightBar} style={style} className = \"array-bar\" key = {idx}></div>\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SortingVisualizer from './SortingVisualizer.js';\n\n\nReactDOM.render(<SortingVisualizer />, document.getElementById('root'));\n"],"sourceRoot":""}