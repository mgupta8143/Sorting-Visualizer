{"version":3,"sources":["sortingAlgorithms/insertionSort.js","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/countingSort.js","sortingAlgorithms/radixSort.js","sortingAlgorithms/selectionSort.js","sortingAlgorithms/heapSort.js","sortingAlgorithms/mergeSort.js","sortingAlgorithms/cocktailSort.js","sortingAlgorithms/pancakeSort.js","sortingAlgorithms/bogoSort.js","ArrayBar.js","SortingVisualizer.js","index.js"],"names":["insertionSort","a","this","numOperations","arr","state","array","shouldStop","i","length","key","j","stopSort","update","bubbleSort","resetSelectedValues","swap","status","quickWrapper","quickSort","setState","left","right","partition","index","pivot","Math","floor","countingSort","min","minQuantity","max","maxQuantity","count","getDigit","num","idx","digit","getNumDigits","largestNum","largest","forEach","val","radixSort","maxLength","buckets","Array","from","stopState","undefined","push","flat","selectionSort","play","checkSorted","tempArr","getMinIndex","minIdx","beginIdx","heapify","n","maxHeapify","heapSort","mergeWrapper","mergeSort","begin","end","middle","merge","temp","slice","findMin","k","cocktailSort","start","pancakeSort","maxIdx","findBiggestElement","flip","bogoSort","shuffle","counter","random","ArrayBar","props","onMouseEnter","onMouseLeave","className","style","children","SortingVisualizer","intializeArray","tempArray","arraySize","randomizedValue","bind","resetArray","getInitialSpeed","handleSpeedChange","sortingSpeed","resetSpeed","changer","selectedValues","swappedValues","colorBegin","colorMultiplier","quantity","playPromise","Audio","volume","rate","isNaN","playbackRate","then","_","console","log","catch","error","bool","forceARender","idx1","idx2","Promise","r","setTimeout","shuffleFlip","event","target","value","selectedIndices","speedMultiplier","algorithms","algo","name","class","id","type","onChange","map","onClick","toString","backgroundColor","height","marginTop","width","e","background","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9164504d.chunk.js","sourcesContent":["export async function insertionSort() {\n    this.numOperations = 0;\n    let arr = this.state.array;\n    this.shouldStop = false;\n    for (let i = 1; i < arr.length; ++i) {\n        let key = arr[i];\n        let j = i - 1;\n        this.numOperations += 2\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j -= 1;\n            this.numOperations += 2\n            if(this.shouldStop === true)\n                return this.stopSort();\n            await this.update(arr, [key,j], 10);\n        }\n        arr[j + 1] = key;\n        this.numOperations += 1\n    }\n    return arr;\n}","export async function bubbleSort() {\n    this.numOperations = 0;\n    let arr = this.state.array;\n    this.shouldStop = false;\n    this.resetSelectedValues();\n    for(let i = 0; i < arr.length; ++i) {\n        for(let j = 0; j < arr.length - i; ++j) {\n            if(arr[j+1] < arr[j])\n            {\n                if(this.shouldStop === true)\n                    return this.stopSort();\n                this.swap(arr, j, j+1)\n                await this.update(arr, [j],1);\n                this.numOperations += 4;  //3 for sorting, 1 for comparison\n            }\n        }\n        if(i >= arr.length - 3) {\n            this.status = \"\";\n        }\n    }\n    return arr;\n}","export async function quickWrapper() {\n    this.shouldStop = false;\n    this.numOperations = 0;\n    let arr = this.state.array;\n    this.resetSelectedValues();\n    this.setState({array: await this.quickSort(arr, 0, arr.length -1)});\n}\n\nexport async function quickSort(arr, left, right) {\n    if (arr.length > 1) {\n        let index = await this.partition(arr, left, right);\n        if(this.shouldStop === true)\n            return this.stopSort(arr, true);\n        if (this.shouldStop === false) {\n            if (left < index - 1) {\n                this.quickSort(arr, left, index - 1);\n                this.numOperations += 2;\n            }\n            if (index < right) {\n                this.quickSort(arr, index, right);\n                this.numOperations += 2;\n            }\n        }\n        else if (left === 0 && right === arr.length - 1) {\n            this.shouldStop = false;\n        }\n    }\n    return arr\n}   \n\nexport async function partition(arr, left, right) {\n    var pivot = arr[Math.floor((right + left) / 2)], i = left, j = right;\n    this.numOperations += 3;\n    while (i <= j) {\n        if(this.shouldStop === true) {\n            break;\n        }\n        while (arr[i] < pivot) {\n            ++i;\n            this.numOperations += 1;\n        }\n        while (arr[j] > pivot) {\n            --j;\n            this.numOperations += 1;\n        }\n        if (i <= j) {\n            this.swap(arr, i, j);\n            this.setState({array:arr});\n            await this.update(arr, [i,j], 50);\n            ++i;\n            --j;\n            this.numOperations += 5;\n        }\n    }\n    return i;\n}","export async function countingSort() {\n    this.resetSelectedValues();\n    this.shouldStop = false;\n    let arr = this.state.array;\n    let min = this.state.minQuantity;\n    let max = this.state.maxQuantity;\n    let count = [];\n    let j = 0;\n    this.numOperations = 5;\n    for(let i = min; i <= max; ++i) {\n        count[i] = 0;\n        this.numOperations += 1;\n    }\n    for(let i = 0; i <= arr.length; ++i) {\n        count[arr[i]] += 1;\n        this.numOperations += 1;\n    }\n    for(let i = min; i <= max; ++i) {\n        while(count[i] > 0) {\n            if(this.shouldStop === true) {\n                return this.stopSort(arr)\n            }\n            arr[j] = i;\n            await this.update(arr, [j], 50);\n            this.setState({array:arr});\n            ++j;\n            --count[i];\n            this.numOperations += 3;\n        }\n    }\n    return arr\n}","export function getDigit(num, idx) {\n    let digit = num % 10;\n    while(idx > 0) {\n        num = (num - (num % 10))/10;\n        idx -= 1;\n        digit = num % 10;\n        this.numOperations += 3;\n    }\n    return digit;\n}\n\nexport function getNumDigits(num) {\n    if(num === 0)\n        return 1;\n    let count = 0;\n    while(num > 0) {\n        num = (num - (num % 10))/10;\n        count += 1;\n        this.numOperations += 2;\n    }\n    return count;\n}\n\nexport function largestNum(arr) {\n    let largest = 0;\n    arr.forEach(val => {\n        if(val > largest) {\n            largest = val;\n            this.numOperations += 1;\n        }\n    });\n    return this.getNumDigits(largest);\n}\n\nexport async function radixSort() {\n    this.shouldStop = false;\n    let arr  = this.state.array;\n    let maxLength = this.largestNum(arr);\n    this.numOperations = 2;\n    for (let i = 0; i < maxLength; ++i) {\n        let buckets = Array.from({ length: 10 }, () => []);\n        for (let j = 0; j < arr.length; ++j) {\n            if(this.shouldStop === true) {\n                return this.stopState(arr);\n            }\n            let num = this.getDigit(arr[j], i);\n            if (num !== undefined) {\n              buckets[num].push(arr[j]);\n              this.numOperations += 1;\n            }\n        };\n        arr = buckets.flat();\n        if(this.shouldStop === true) {\n            return this.stopState(arr);\n        }\n        await this.update(arr, [], 30000)\n        this.setState({array:arr});\n    };\n    return arr;\n}","export async function selectionSort() {\n    this.play();\n    this.numOperations = 0;\n    this.shouldStop = false;\n    let arr = this.state.array;\n    if(this.checkSorted(arr))\n        return;\n    this.resetSelectedValues();\n    for(let i = 0; i < arr.length - 1; ++i) {\n        let tempArr = getMinIndex(arr, i);\n        let minIdx = tempArr[0];\n        this.numOperations += tempArr[1];\n        this.swap(arr, minIdx, i);\n        this.numOperations += 3\n        if(this.shouldStop === true) {\n            return this.stopSort(arr);\n        }\n        await this.update(arr, [minIdx, i], 100);\n        this.setState({array:arr});\n    }\n    return arr;\n}\n\n\n\nfunction getMinIndex(arr, beginIdx = 0) {\n    let idx = beginIdx\n    let val = 0;\n    for(let i = beginIdx + 1; i < arr.length; ++i) {\n        val += 1;\n        if(arr[i] < arr[idx]) {\n            idx = i;\n            val += 1;\n        }\n    }\n    return [idx, val];\n}","export async function heapify(arr, n, i) {\n    let max = i;\n    let left = 2*i + 1;\n    let right = 2*i + 2;\n    this.numOperations += 3;\n\n    if(left < n && arr[left] > arr[max]) {\n        max = left;\n        this.numOperations += 1;\n    }\n    if(right < n && arr[right] > arr[max]) {\n        max = right;\n        this.numOperations += 1;\n    }\n\n    if(max !== i) {\n        this.swap(arr, max, i);\n        this.numOperations += 4;\n        await this.heapify(arr, n, max);\n    }\n\n    await this.update(arr, [max, i], 1000);\n}\n\nexport async function maxHeapify(arr) {\n    for(let i = Math.floor(arr.length/2); i >= 0; --i) {\n        this.numOperations += 1;\n        await this.heapify(arr, arr.length, i);\n        if(this.shouldStop) {\n            this.resetSelectedValues()\n            this.status = \"\";\n            return arr;\n        }\n    }\n    return arr;\n}\n\nexport async function heapSort() {\n    this.numOperations = 0;\n    let arr = this.state.array;\n    this.shouldStop = false;\n    arr = await this.maxHeapify(arr);\n    for(let n = arr.length-1; n >= 0; --n) {\n        this.numOperations += 1;\n        if(this.shouldStop) {\n            this.shouldStop = false;\n            this.resetSelectedValues()\n            this.status = \"\";\n            return arr;\n        }\n        this.swap(arr, n, 0);\n        this.numOperations += 3;\n        await this.heapify(arr, n, 0);\n    }\n    return arr;\n}","export async function mergeWrapper() {\n   this.shouldStop = false;\n   this.numOperations = 0;\n   await this.mergeSort(this.state.array, 0, this.state.array.length);\n}\n\n\nexport async function mergeSort(arr, begin, end) {\n   if(end-begin <= 1) {\n      return [begin, end];\n   }\n   let middle = Math.floor((begin + end)/2)\n   this.numOperations += 1;\n   if(this.shouldStop) {\n      this.stopSort(arr, true)\n      return [begin, end];\n   }\n   let left = await this.mergeSort(arr, begin, middle);\n   let right = await this.mergeSort(arr, middle, end);\n   let temp = await this.merge(arr, left[0], middle, right[1]);\n   this.numOperations += 3;\n   while(this.checkSorted(arr.slice(left[0], right[1])) === false) {\n      if(this.shouldStop) {\n         this.stopSort(arr, true)\n         return [begin, end];\n      }\n      this.numOperations += 1;\n      temp = await this.merge(arr, left[0], middle, right[1]);\n   }\n   return temp;\n}\n\n/* IN-PLACE MERGE */\nexport async function merge(arr, begin, middle, end) {\n   let i = begin;\n   let j = middle;\n   while(i < end && j < end) {\n      if(this.shouldStop) {\n         this.stopSort(arr, true)\n         return [begin, end];\n      }\n      await this.update(arr,[i,j], 10);\n      if(arr[i] <= arr[j]) {\n         ++i;\n         this.numOperations += 1;\n      }\n      else if(arr[i] > arr[j]) {\n         this.swap(arr, i, j);\n         j = findMin(arr,j,j+1);\n         ++i;\n         this.numOperations += 5;\n      }\n      if(i === j) {\n         ++j;\n         this.numOperations += 1;\n      }\n   }\n   return [begin, end]; \n}\n\n\nfunction findMin(arr, j, k) {\n  if(arr[k] < arr[j])\n    return k;\n  else\n    return j;\n}\n","/*FIX STOP*/\r\n\r\nexport async function cocktailSort() {\r\n    let arr = this.state.array;\r\n    let start = 0;\r\n    let end = arr.length;\r\n    this.numOperations = 3;\r\n    this.shouldStop = false;\r\n    for(let n = 0; n < arr.length; n++) {\r\n        if(n % 2 === 0)  {\r\n            let idx = start;\r\n            while(idx !== end - 1) {\r\n                if(arr[idx + 1] < arr[idx]) {\r\n                    this.swap(arr, idx, idx + 1);\r\n                    this.numOperations += 3\r\n                    await this.update(arr, [idx, idx+1], 100);\r\n                    if(this.shouldStop)\r\n                        return this.stopSort(arr);\r\n                }\r\n                ++idx;\r\n                this.numOperations += 1;\r\n            }\r\n            --end;\r\n            this.numOperations += 1;\r\n        }\r\n        else {\r\n            let idx = end - 1;\r\n            while(idx !== start) {\r\n                if(arr[idx - 1] > arr[idx]) {\r\n                    this.swap(arr, idx, idx-1);\r\n                    this.numOperations += 3;\r\n                    await this.update(arr, [idx, idx-1], 100);\r\n                    if(this.shouldStop)\r\n                        return this.stopSort(arr);\r\n                }\r\n                --idx;\r\n                this.numOperations += 1;\r\n            }\r\n            ++start;\r\n            this.numOperations += 1;\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\n/*\r\nexport async function cocktailSort() {\r\n    let arr = this.state.array;\r\n    let start = 0;\r\n    let end = arr.length;\r\n    for(let n = 0; n < arr.length; n++) {\r\n        if(n % 2 === 0)  {\r\n            end = await this.moveBar(1, start, end)[1];\r\n        }\r\n        else {\r\n            start = await this.moveBar(-1, start, end)[0];\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport async function moveBar(direction, start, end) {\r\n    let arr = this.state.array;\r\n    let idx = 0, stopIdx = 0;\r\n    if(direction === 1) {idx = start; stopIdx = end-1;}\r\n    if(direction === -1) {idx = end-1; stopIdx = start;}\r\n    while(idx != stopIdx) {\r\n        if(giveDirectionConditional(arr, direction, idx)) {\r\n            this.swap(arr, idx, idx + direction);\r\n            await this.update(arr, [idx, idx+direction], 100);\r\n        }\r\n        idx = idx + direction;\r\n    }\r\n    if(direction === 1) --end;\r\n    if(direction === -1) ++start;\r\n    return [start, end];\r\n\r\n}\r\n\r\nfunction giveDirectionConditional(arr, direction, idx) {\r\n    if(direction == 1) return arr[idx+direction] < arr[idx];\r\n    if (direction == -1) return arr[idx+direction] > arr[idx];\r\n}\r\n*/","export async function pancakeSort() {\r\n    this.shouldStop = false;\r\n    let arr = this.state.array;\r\n    let start = 0;\r\n    let end = arr.length - 1;\r\n    this.numOperations = 3;\r\n    while(end >= 0) {\r\n        if(this.shouldStop) {\r\n            return this.stopSort(arr, true);\r\n        }\r\n        let maxIdx = findBiggestElement(arr, start, end);\r\n        this.numOperations += end-start+1;\r\n        arr = await this.flip(arr, maxIdx);\r\n        arr = await this.flip(arr, end);\r\n        --end;\r\n        this.numOperations += 4;\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport async function flip(arr, i) {\r\n    let start = 0;\r\n    if(this.shouldStop) {\r\n        return this.stopSort(arr,true);\r\n    }\r\n    while(start < i) {\r\n        if(this.shouldStop) {\r\n            return this.stopSort(arr, true);\r\n        }\r\n        this.swap(arr, i, start);\r\n        await this.update(arr, [start, i], 100);\r\n        ++start;\r\n        --i;\r\n        this.numOperations += 5;\r\n    }\r\n    return arr\r\n}\r\n\r\nfunction findBiggestElement(arr, start, end) {\r\n    let idx = start;\r\n    for(let i = start; i <= end; i++) {\r\n        if(arr[i] > arr[idx]) {\r\n            idx = i;\r\n        }\r\n    }\r\n    return idx;\r\n\r\n}","export async function bogoSort() {\r\n    this.shouldStop = false;\r\n    this.numOperations = 0;\r\n    let arr = this.state.array;\r\n    while(!this.checkSorted(arr)) {\r\n        this.numOperations += arr.length + 1;\r\n        arr = await this.shuffle(arr);\r\n        if(this.shouldStop === true) {\r\n            return this.stopSort(arr, true);\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\n\r\n\r\nexport async function shuffle(array) {\r\n    let counter = array.length;\r\n    while (counter > 0) {\r\n        let index = Math.floor(Math.random() * counter);\r\n        counter--;\r\n        this.swap(array, counter, index)\r\n        this.numOperations += 6;\r\n        if(this.shouldStop === true) {\r\n            return this.stopSort(array, true);\r\n        }\r\n        await this.update(array, [index, counter], 100);\r\n    }\r\n    return array;\r\n}","import React from 'react'\r\n\r\nexport default function ArrayBar(props) {\r\n\r\n    return (\r\n        <div onMouseEnter = {props.onMouseEnter} onMouseLeave = {props.onMouseLeave} className = {props.className} style = {props.style} key = {props.key}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {insertionSort} from './sortingAlgorithms/insertionSort';\r\nimport {bubbleSort} from './sortingAlgorithms/bubbleSort';\r\nimport {quickSort, quickWrapper, partition} from './sortingAlgorithms/quickSort';\r\nimport {countingSort} from './sortingAlgorithms/countingSort';\r\nimport {getDigit, getNumDigits, largestNum, radixSort} from './sortingAlgorithms/radixSort';\r\nimport {selectionSort} from './sortingAlgorithms/selectionSort';\r\nimport {heapSort, heapify, maxHeapify} from './sortingAlgorithms/heapSort';\r\nimport {mergeWrapper, mergeSort, merge} from './sortingAlgorithms/mergeSort';\r\nimport {cocktailSort} from \"./sortingAlgorithms/cocktailSort\";\r\nimport {pancakeSort, flip} from \"./sortingAlgorithms/pancakeSort\";\r\nimport {bogoSort, shuffle} from \"./sortingAlgorithms/bogoSort\";\r\nimport ArrayBar from \"./ArrayBar\";\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        /*Changed Format of Sorting Visualizer */\r\n        super(props);\r\n        this.mergeWrapper = mergeWrapper.bind(this);\r\n        this.mergeSort = mergeSort.bind(this);\r\n        this.merge = merge.bind(this);\r\n        this.insertionSort = insertionSort.bind(this);\r\n        this.bubbleSort = bubbleSort.bind(this);\r\n        this.quickWrapper = quickWrapper.bind(this);\r\n        this.quickSort = quickSort.bind(this);\r\n        this.partition = partition.bind(this);\r\n        this.countingSort = countingSort.bind(this);\r\n        this.radixSort = radixSort.bind(this);\r\n        this.getDigit = getDigit.bind(this);\r\n        this.getNumDigits = getNumDigits.bind(this);\r\n        this.largestNum = largestNum.bind(this);\r\n        this.selectionSort = selectionSort.bind(this);\r\n        this.heapSort = heapSort.bind(this);\r\n        this.heapify = heapify.bind(this);\r\n        this.maxHeapify = maxHeapify.bind(this);\r\n        this.cocktailSort = cocktailSort.bind(this);\r\n        this.pancakeSort = pancakeSort.bind(this);\r\n        this.bogoSort = bogoSort.bind(this);\r\n        this.shuffle = shuffle.bind(this);\r\n        this.flip = flip.bind(this);\r\n    \r\n        this.resetArray = this.resetArray.bind(this);\r\n        this.stopState = this.stopState.bind(this);\r\n        this.getInitialSpeed = this.getInitialSpeed.bind(this);\r\n        this.handleSpeedChange = this.handleSpeedChange.bind(this);\r\n        this.resetSelectedValues = this.resetSelectedValues.bind(this);\r\n        this.update = this.update.bind(this);\r\n\r\n        this.state = {array: [], arraySize: 75, minQuantity: 1, maxQuantity: 70, sortingSpeed: 50, resetSpeed: 1, changer: true}\r\n        this.shouldStop = false;\r\n        this.status = \"\";\r\n        this.selectedValues = [];\r\n        this.swappedValues = [];\r\n        this.colorBegin = 100;\r\n        this.colorMultiplier = 2;\r\n        this.numOperations = 0;\r\n        this.intializeArray();\r\n        \r\n    }\r\n\r\n    play(quantity) {\r\n      var playPromise = new Audio('../soundEffects/perc-chirpy.wav');\r\n      playPromise.volume = 0.1;\r\n      let rate = quantity/this.maxQuantity*16\r\n      if(isNaN(rate)) {\r\n          rate = 1;\r\n      }\r\n      playPromise.playbackRate = rate;\r\n      playPromise = playPromise.play();\r\n      if (playPromise !== undefined) {\r\n        playPromise\r\n          .then(_ => {\r\n            // Automatic playback started!\r\n            // Show playing UI.\r\n            console.log(\"audio played auto\");\r\n          })\r\n          .catch(error => {\r\n            // Auto-play was prevented\r\n            // Show paused UI.\r\n            console.log(\"playback prevented\");\r\n          });\r\n      }\r\n    }\r\n\r\n    intializeArray = () => {\r\n        let tempArray = []\r\n        for(let i = 0; i < this.state.arraySize; i++) {\r\n            let max = this.state.maxQuantity;\r\n            let min = this.state.minQuantity;\r\n            let randomizedValue = Math.floor(Math.random() * (max + 1 - min) + min);\r\n            tempArray.push(randomizedValue);\r\n        }\r\n        this.state.array = tempArray;\r\n    }\r\n\r\n    forceARender() {\r\n        this.setState({changer: !this.state.changer});\r\n    }\r\n\r\n    stopSort(arr, bool = false) {\r\n        this.status = \"\";\r\n        this.resetSelectedValues();\r\n        this.shouldStop = bool;\r\n        this.numOperations = 0;\r\n        return arr;\r\n    }\r\n\r\n    resetSelectedValues() {\r\n        this.forceARender();\r\n        this.selectedValues = [];\r\n        for(let i = 0; i < this.arraySize; ++i) {\r\n            this.selectedValues.push(0);\r\n        }\r\n\r\n    }\r\n\r\n    checkSorted(arr) {\r\n        for(let i = 0; i < arr.length - 1; ++i) \r\n            if(arr[i+1] < arr[i])\r\n                return false;\r\n        return true;\r\n    }\r\n\r\n\r\n    swap(arr, idx1, idx2) {\r\n        let temp = arr[idx1];\r\n        arr[idx1] = arr[idx2];\r\n        arr[idx2] = temp;\r\n    }\r\n\r\n    \r\n    async resetArray() {\r\n        this.stopState();\r\n        this.status = \"Resetting...\";\r\n        let tempArray = [];\r\n        this.numOperations = 0;\r\n        for(let i = 0; i < this.state.arraySize; ++i) {\r\n            let max = this.state.maxQuantity;\r\n            let min = this.state.minQuantity;\r\n            let randomizedValue = Math.floor(Math.random() * (max + 1 - min) + min);\r\n            tempArray.push(randomizedValue);\r\n            this.setState({array: tempArray});\r\n            await new Promise(r => setTimeout(r, this.state.resetSpeed));\r\n            if(i === this.state.arraySize - 2) {\r\n                this.status = \"\";\r\n            }\r\n            if(i % 12 === 0) {\r\n                this.shuffleFlip(this.state.array);\r\n                this.colorBegin = Math.random() * 360;\r\n                this.colorMultiplier = 1 + Math.random();\r\n            }\r\n        }\r\n        this.numOperations = 0;\r\n    }\r\n\r\n    async shuffleFlip(arr, i) {\r\n        for(let i = 0; i < arr.length; ++i) {\r\n            let max = this.state.maxQuantity;\r\n            let min = this.state.minQuantity;\r\n            let randomizedValue = Math.floor(Math.random() * (max + 1 - min) + min);\r\n            arr[i] = randomizedValue;\r\n        }\r\n    }\r\n\r\n    stopState() {\r\n        this.status = \"\";\r\n        while(this.shouldStop === false) \r\n            this.shouldStop = true;\r\n    }\r\n\r\n    getInitialSpeed() {\r\n        this.setState({sortingSpeed: 50});\r\n    }\r\n\r\n    handleSpeedChange(event) {\r\n        this.setState({sortingSpeed: event.target.value});\r\n    }\r\n\r\n    async update(arr, selectedIndices, speedMultiplier) {\r\n        return new Promise(r => {\r\n            setTimeout(r, speedMultiplier/this.state.sortingSpeed);\r\n            this.status = \"Sorting...\";\r\n            selectedIndices.forEach(index => {\r\n                if(index < arr.length && 0 <= index)\r\n                    this.selectedValues[index] = 1\r\n            });\r\n            if(this.checkSorted(arr)) {\r\n                this.status = \"\";\r\n                this.resetSelectedValues();\r\n            }\r\n            this.setState({array: arr});\r\n            this.resetSelectedValues();\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let array = this.state.array;\r\n        const algorithms =  [\r\n            { algo: this.insertionSort, name: \"Insertion Sort\" },\r\n            { algo: this.bubbleSort, name: \"Bubble Sort\" },\r\n            { algo: this.quickWrapper, name: \"Quick Sort\" },\r\n            { algo: this.countingSort, name: \"Counting Sort\" },\r\n            { algo: this.radixSort, name: \"Radix Sort\" },\r\n            { algo: this.selectionSort, name: \"Selection Sort\" },\r\n            { algo: this.heapSort, name: \"Heap Sort\" },\r\n            { algo: this.mergeWrapper, name: \"Merge Sort\" },\r\n            { algo: this.cocktailSort, name: \"Cocktail Sort\" },\r\n            { algo: this.pancakeSort, name: \"Pancake Sort\" },\r\n            { algo: this.bogoSort, name: \"Bogo Sort\"}\r\n          ];\r\n        return (\r\n            <div class = \"row content-wrapper\">\r\n                                \r\n                <div class = \"col-2\" id = \"navbar\">\r\n                    <ul id = \"sortList\">\r\n                        <input type=\"range\" min=\"1\" max={this.state.arraySize/2} value={this.state.sortingSpeed}  onChange = {this.handleSpeedChange} class=\"slider\" id=\"myRange\"></input>\r\n                        {\r\n                            //Special Thanks to gimmeslack12 for suggesting this MASSIVE improvement!!!\r\n                        algorithms.map((a) => (\r\n                            <li key={a.name}>\r\n                            <button class=\"btn btn-outline-info btn-block\" onClick={a.algo}>\r\n                                {a.name}\r\n                            </button>\r\n                            </li>\r\n                        ))}\r\n                        <li>\r\n                            <button class=\"btn btn-outline-info btn-block\" onClick = {this.resetArray}>Reset Array</button>\r\n                        </li>\r\n                        <li>\r\n                            <button class=\"btn btn-outline-danger btn-block\" onClick = {this.stopState} >Stop</button>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div class = \"col-10\" id = \"visualizer\">\r\n                    <h1 id = \"status\">{this.status}</h1>\r\n                    <h1 id = \"operation\">{\"Operations: \" + this.numOperations.toString()}</h1>\r\n                    <ul className = \"stack\">\r\n                        {\r\n                        array.map((quantity, idx) => {\r\n                            let highlightBar = (e) => {\r\n                                e.target.style.background = \"hsla(\" + (this.colorBegin -100).toString() + \", 100%, 50%, 1)\";\r\n                            }\r\n                            let unhighlightBar = (e) => {\r\n                                e.target.style.background = \"hsla(\" + (this.colorBegin+quantity*this.colorMultiplier).toString() + \", 100%, 50%, 1)\";\r\n                            }\r\n                            let backgroundColor = \"hsla(\" + (this.colorBegin+quantity*this.colorMultiplier).toString() + \", 100%, 50%, 1)\";\r\n                            if(this.selectedValues[idx] === 1) {\r\n                                backgroundColor = \"hsla(\" + (this.colorBegin -100).toString() + \", 100%, 50%, 1)\"\r\n                                this.play(quantity);\r\n                            }\r\n                            const style = {\r\n                                height: quantity.toString() + \"vh\",\r\n                                marginTop: (-1 * (quantity - 5)/2).toString() + \"vh\",\r\n                                width: (70/this.state.arraySize).toString() + \"vw\",\r\n                                backgroundColor: backgroundColor\r\n                            };\r\n                            return <ArrayBar onMouseEnter = {highlightBar} onMouseLeave = {unhighlightBar} style={style} className = \"array-bar\" key = {idx}></ArrayBar>\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SortingVisualizer from './SortingVisualizer.js';\n\n\nReactDOM.render(<SortingVisualizer />, document.getElementById('root'));\n"],"sourceRoot":""}